// Code generated by go-bindata. DO NOT EDIT.
// sources:
// config/config.yaml
package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\x4f\x4f\x1b\x3d\x10\xc6\xef\x91\xf2\x1d\x46\xe2\xcc\x66\x13\x20\xbc\xf8\xc6\x9f\x20\x78\x45\xda\x88\x0d\xe2\x58\x39\xd9\xc9\xe2\xca\xbb\x36\xb6\x17\xb6\x3d\xb5\x87\x5e\xaa\x20\x68\x85\xc4\xa1\x5c\x50\x2b\x15\xa9\x2d\xbd\x54\x3d\xb4\xd0\x7e\x9a\xcd\xc2\x89\xaf\x50\x85\x35\x61\x03\x95\x7a\xb3\x9f\xf1\xcc\x3c\xfe\xcd\x4c\xc0\xe0\x78\x2f\x7d\x7d\x72\xf5\x6a\x2f\xbb\x38\xbb\x3e\xef\x5f\x9e\xfd\xca\x2e\xce\x2e\x7f\x1f\x5c\x9e\xf4\x07\xa7\x27\xe9\xf9\xfe\xf5\x79\x3f\x7b\xf7\x26\x3d\xf8\x9c\x7d\xfa\x9a\xee\xbf\x4f\xdf\xf6\x07\xc7\x2f\xd2\x0f\x1f\x07\xfd\x97\xd9\xcf\x2f\x83\xa3\xef\x57\x47\xdf\xca\x25\x0f\xd5\x0e\x2a\x52\x2e\x01\x00\xac\xc7\x51\x53\xf8\x48\xc0\xc7\x4e\x1c\xe4\xda\x8a\x31\xb2\x25\x94\x21\x30\xe7\xba\xae\x7d\x87\xd4\x6f\xb3\x10\x45\x6c\x08\xd4\xad\xb8\xa9\x98\xc1\x31\x75\x02\xd2\x1f\x87\xd9\xe1\x69\x6e\xb2\x5c\x9a\x97\xd2\x36\x5a\xc2\x1e\x8d\xb9\x69\xd1\x00\x3d\xf6\x1c\x09\x54\x6d\x91\x26\x4d\x8a\xa2\x55\xd7\x44\xe0\xd1\x1d\x6c\x51\xb3\x45\x40\x1b\xa1\x68\x80\x15\x2e\x02\x3d\x0a\x2f\x33\x8e\x8f\x68\x88\x04\xa8\x94\x63\x6a\x23\x31\x40\xc0\xe1\xc2\xfe\x67\x43\x72\x41\xfd\xf1\x52\xf1\x8d\xa6\x8b\x0f\x72\x2e\x1b\x8a\x13\xd8\x32\x46\x92\x4a\xa5\x5a\x9b\x75\x5c\xc7\x75\xaa\x64\x08\xa2\xa2\x0d\x35\xac\x5b\x4c\x59\x0d\x69\x80\x4d\x9a\xe4\xe6\x67\x60\x02\x9a\x0b\x0f\xe2\xf3\x9c\x8b\xdd\x46\x62\x2c\x88\x49\x70\x9e\xca\xa0\x70\xc6\xbb\x8b\x8c\xee\xce\x01\xeb\x95\x4b\x4b\xd4\xd0\x0e\xd5\x68\x73\xdb\xcf\x24\x12\x90\x42\x9b\x40\xa1\x35\xbf\x22\xb4\x21\x30\xb2\x9a\x8b\xf9\xf8\x66\xa6\xa7\x6a\xd6\x8e\x46\x95\xc3\x1a\x4f\x6e\x51\xad\x77\x85\xf2\x09\xd4\xea\xb5\x5a\xd5\x9d\xb2\xf8\x47\x7d\xa1\xc3\x45\xf0\x44\xdf\xa0\xb1\xa1\x85\xbc\xd0\x83\x40\x9b\x76\x38\xb6\x14\xf6\x58\x62\xa3\xb9\xbe\xb8\x45\x95\x46\x43\x20\x36\xbd\xff\xc2\xce\xf4\x6d\x67\xa5\x6f\x76\x87\x80\x51\x31\x8e\x76\x61\xd5\xe7\xb8\x28\xa2\x48\x8f\x6d\xc8\x63\x89\x91\x55\x87\x16\xff\xdf\x6c\x5b\x22\x1e\x76\xd5\xb0\xb6\xc2\x28\x61\x51\xae\xad\x6a\x1d\xa3\xca\x3d\x4c\x0e\x1d\xb2\xae\xad\xdf\x48\x24\x53\x48\x60\xb6\x36\xdc\xb3\x46\x48\x19\x27\x45\x8a\x3a\x34\xd2\xd9\xde\x76\xba\x22\x2c\x72\x9c\xae\xcf\xdc\xc3\x78\x8f\xde\x6d\x5f\xcf\x5b\x2b\x7e\x67\x59\x89\xf0\x76\x72\x82\x94\x4b\xeb\xe8\x33\x4d\xfe\x39\xb6\xfa\xd4\xec\xdc\x5f\x1b\x2c\x2d\x10\x70\xcb\xa5\x3f\x01\x00\x00\xff\xff\x43\xe7\xc3\x89\x0a\x04\x00\x00")

func configConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_configConfigYaml,
		"config/config.yaml",
	)
}

func configConfigYaml() (*asset, error) {
	bytes, err := configConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/config.yaml", size: 1034, mode: os.FileMode(438), modTime: time.Unix(1701441168, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/config.yaml": configConfigYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config": &bintree{nil, map[string]*bintree{
		"config.yaml": &bintree{configConfigYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
